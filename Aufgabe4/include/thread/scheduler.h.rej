--- oostubs/include/thread/scheduler.h	2015-06-23 14:00:43.293998228 +0200
+++ include/thread/scheduler.h	2015-06-23 14:00:53.486049325 +0200
@@ -33,6 +33,19 @@
   /** \brief flag set upon start of scheduler **/
     bool started;
 
+  /**
+   * \~english
+   * \brief Idle Thread
+   *
+   * This thread is running when no other thread is available.
+   *
+   **/
+
+  class Idle : public Thread{
+    /** \brief Halts the CPU, waiting for interrupts **/
+    virtual void action();
+  } idle;
+
 
 public:
   /** \brief Default Constructor clearing started flag **/
@@ -60,22 +73,33 @@
    **/
   void exit();
 
-  /** \brief Remove the specified thread from the queue of threads, killing the execution of this thread.
-   *
-   * @param that reference of the thread to be killed.
-   * @returns whether operation was successful
-   */
-  bool kill(Thread& that);
-
   /** \brief Yield to another ready thread **/
   void yield();
-private: // all private functions assume that interrupts are turned off
+
+  /** \brief Returns pointer to active thread **/
+  Thread* active() const;
+
+protected:
   /** \brief helper function stop the execution of the current thread and switch to next one
    *
    *  This helper function unifies the scheduling of the next thread
    **/
   void next();
 
+  /** \brief Reactivates an unblocked thread by reinserting it to the thread queue.
+   *
+   * @param unblocked thread to be reactivated
+   **/
+  void reactivate(Thread& unblocked);
+
+  /** \brief Remove the specified thread from the queue of threads, killing the execution of this thread.
+   *
+   * @param that reference of the thread to be killed.
+   * @returns whether operation was successful
+   */
+  bool kill(Thread& that);
+
+private:
   /** \brief helper function to yield unguarded to another thread
    *
    *  This helper function is used by watch to preempt the currently running thread.
