--- src/main.cc 2015-06-08 12:03:24.077788195 +0200
+++ aufg4/src/main.cc  2015-06-08 12:14:47.512495349 +0200
@@ -13,35 +13,73 @@
 #include "device/interruptmanager.h"
 #include "device/keyboard.h"
 #include "device/cgastr.h"
+#include "device/watch.h"
 #include "device/log.h"
+#include "thread/scheduler.h"
+#include "locking/interruptLock.h"
+#include "user/task1.h"
+#include "user/task2.h"
+#include "user/task3A.h"
+#include "user/task3B.h"
+#include "user/task3C.h"
+#include "user/task4.h"
 
 /* MACROS */
 
-/// \~german  festlegen, welche Aufgabenanwendung verwendet werden soll
-/// \~english define which task is desired
-#define USE_TASK           30
-
-//load the necessary header and define the class name of the task
-#if USE_TASK == 10
-  #include "user/task1.h"
-#elif USE_TASK == 20
-  #include "user/task2.h"
-#elif USE_TASK == 30
-  #include "user/task3A.h"
-  #include "user/task3B.h"
-  #include "user/task3C.h"
-#endif
-
+/// \~english define the task to execute
+#define USE_TASK 40
 
 /* GLOBAL OBJECTS */
 
-InterruptManager iManager;
-CGA_Stream kout;
-Keyboard keyboard;
+/** \brief global CPU object **/
 CPU cpu;
+/** \brief global Lock to prevent interrupt based concurrancy **/
+InterruptLock lock;
+/** \brief Log for debug output over serial connection **/
 Log log;
+/** \brief Scheduler of all Threads **/
+Scheduler scheduler;
+/** \brief Display output stream **/
+CGA_Stream kout;
+/** \brief Interrupt handling unit **/
+InterruptManager iManager;
+/** \brief Keyboard input facility **/
+Keyboard keyboard;
+/** \brief Periodic timer used for preemption of Threads **/
+Watch watch;
+
+#if USE_TASK == 10
+  /**\brief The first student task test application **/
+  Task1 task1;
+#elif USE_TASK == 20
+  /**\brief The second student task test application **/
+  Task2 task2;
+#elif USE_TASK == 30
+  /**\brief The third student task test application for part A**/
+  Task3A task3a;
+  /**\brief The third student task test application for Part B**/
+  Task3B task3b;
+#elif USE_TASK == 40
+  /**\brief The fourth student task test application **/
+  Task4 task4;
+#endif
 
 /* METHODS  */
+/** \brief Wait for user input via keyboard to select sub task
+ *
+ *  \param minSubTask minimum task character
+ *  \param maxSubTask maximum task character
+ *
+ *  \return character of the choosen sub task
+ **/
+char getSubTask(char minSubTask, char maxSubTask){
+  kout << "Please choose subtask [" << minSubTask << ", " << maxSubTask << "]" << endl;
+  Key k;
+  do{
+      k=keyboard.get_key();
+  }while(!k.valid() || k.ascii()<minSubTask || k.ascii()>maxSubTask);
+  return k.ascii();
+}
 
 extern "C" void kernel(uint32_t magic, const Multiboot_Info* info);
 
@@ -55,20 +93,24 @@
  * 
  **/
 void kernel(uint32_t magic, const Multiboot_Info* info){
-  
+  kout.clear();
+  keyboard.plugin();
+  watch.windup(10000);
+
 #if USE_TASK == 10
-  Task1 task(magic, info);
-  task.action();
+  task1.setup(magic, info);
+  scheduler.insert(task1);
 #elif USE_TASK == 20
-  Task2 task;
-  task.action();
+  scheduler.insert(task2);
+  cpu.enable_int();
 #elif USE_TASK == 30
-  kout.clear();
   kout << "Please choose subtask A-C" << endl;
   Key k;
   do 
   {
     k=keyboard.key_hit();
+  if(getSubTask('A', 'B')=='A'){
+    task3a.action();
   }
   while(!k.valid() || k.ascii() < 'A' || k.ascii() > 'C');
 
@@ -86,6 +128,11 @@
     kout<<"Task3 finished";
     while(1);
   }
+#elif USE_TASK == 40
+  if(getSubTask('A', 'B')=='A')
+    task4.enableCoop();
+  scheduler.insert(task4);
 #endif
-  while(1);
+
+  scheduler.start();
 }
